# button.hpp interface.hpp
!button.cpp button.hpp clocale graphics.h interface.hpp keys_n_colors.h locale.h math.h stdio.h #<#>
!button.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception fstream graphics.h initializer_list interface.hpp ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error type_traits typeinfo utility vector wchar.h wctype.h #<#>
!interface.cpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception fstream graphics.h initializer_list interface.hpp ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error type_traits typeinfo utility vector wchar.h wctype.h #<#>
!interface.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception fstream graphics.h initializer_list ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error type_traits typeinfo utility vector wchar.h wctype.h #<#>
!main.cpp button.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception fstream graphics.h initializer_list interface.hpp ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error type_traits typeinfo utility vector wchar.h wctype.h #<#>
NUMBUTTONS #<button.hpp>
areaDraw _type_ #<interface.hpp>
areaDraw(int x1, int y1, int x2, int y2) #<interface.hpp>
background : IMAGE*[] #<interface.hpp>
button _type_ #<button.hpp>
button(int x, int y, string icon) #<button.hpp>
buttonFile _type_ #<button.hpp>
buttonFile(int x, int y, string icon, ptrFunction a) #<button.hpp>
buttonFurniture _type_ #<button.hpp>
buttonFurniture(int x, int y, string icon, int type, ptrFunction t) #<button.hpp>
buttonTools _type_ #<button.hpp>
buttonTools(int x, int y, string icon, ptrFunction t) #<button.hpp>
buttons : button*[] #<main.cpp>
figure _type_ #<interface.hpp>
figure(int x1, int y1, int x2, int y2) #<interface.hpp>
fileEnd() -> void #<button.hpp>
fileLoad() -> void #<button.hpp>
fileSave() -> void #<button.hpp>
getCenterX() -> int #<interface.hpp>
getCenterY() -> int #<interface.hpp>
getNumRoom() -> areaDraw int #<interface.hpp>
main() -> int #<main.cpp>
mainDraw() -> void #<main.cpp>
mainInitialization() -> void #<main.cpp>
modeFigure(int x1, int y1, int x2, int y2) -> void #<button.cpp>
modeStretch(int& x1, int& y1, int& x2, int& y2, void(* shape)(int x1, int y1, int x2, int y2)) -> bool #<button.cpp>
objectClickable _type_ #<interface.hpp>
objectClickable(int x1, int y1, int x2, int y2) #<interface.hpp>
objectDisplay _type_ #<interface.hpp>
objectDisplay() -> virtual~ #<interface.hpp>
objectDisplay(int x1, int y1, int x2, int y2) #<interface.hpp>
objectFigureOnWall _type_ #<interface.hpp>
objectFigureOnWall(int x1, int y1, int x2, int y2, IMAGE* a) #<interface.hpp>
objectFurniture _type_ #<interface.hpp>
objectFurniture(int x1, int y1, int x2, int y2, int t) #<interface.hpp>
objectWall _type_ #<interface.hpp>
objectWall(int x1, int y1, int x2, int y2, int w) #<interface.hpp>
ptrFunction _type_ #<interface.hpp>
save() -> void #<interface.hpp>
toolDelete() -> void #<button.hpp>
toolDoor() -> void #<button.hpp>
toolFurniture() -> void #<button.hpp>
toolMove() -> void #<button.hpp>
toolPlus() -> void #<button.hpp>
toolWall() -> void #<button.hpp>
toolWindow() -> void #<button.hpp>
	areaDraw:%numRoom : int #<interface.hpp>
	areaDraw:%center : center #<interface.hpp>
	areaDraw:%coord : coord #<interface.hpp>
	areaDraw:%tool : ptrFunction #<interface.hpp>
	areaDraw:%figures : vector #<interface.hpp>
	areaDraw:%x1 : int #<interface.hpp>
	areaDraw:%y1 : int #<interface.hpp>
	areaDraw:%x2 : int #<interface.hpp>
	areaDraw:%y2 : int #<interface.hpp>
	areaDraw::back : int #<interface.hpp>
	areaDraw::outputObjects() -> void #<interface.hpp>
	areaDraw::deleteFigure(int x, int y) -> void #<interface.hpp>
	areaDraw::addFigure(figure* figure) -> void #<interface.hpp>
	areaDraw::draw() -> void #<interface.hpp>
	areaDraw::press() -> void #<interface.hpp>
	areaDraw::setTool(ptrFunction t) -> void #<interface.hpp>
	areaDraw::setCenter(int xc, int yc) -> void #<interface.hpp>
	areaDraw::setBack(int back) -> void #<interface.hpp>
	areaDraw::setNumRoom(int num) -> void #<interface.hpp>
	areaDraw::setCoord(int xt1, int yt1, int xt2, int yt2) -> void #<interface.hpp>
	areaDraw::getX1() -> int #<interface.hpp>
	areaDraw::getY1() -> int #<interface.hpp>
	areaDraw::getX2() -> int #<interface.hpp>
	areaDraw::getY2() -> int #<interface.hpp>
	areaDraw::getTool() -> ptrFunction #<interface.hpp>
	areaDraw::tool : ptrFunction get—(){return #<interface.hpp>
	areaDraw::press() -> virtual void #<interface.hpp>
	areaDraw::in(int x, int y) -> bool #<interface.hpp>
	areaDraw::draw() -> virtual void #<interface.hpp>
	areaDraw::getTop() -> int #<interface.hpp>
	areaDraw::getLeft() -> int #<interface.hpp>
	areaDraw::getHeight() -> int #<interface.hpp>
	areaDraw::getWidth() -> int #<interface.hpp>
	areaDraw$%center _type_ #<interface.hpp>
	areaDraw$%coord _type_ #<interface.hpp>
	areaDraw$:example() -> areaDraw& #<interface.hpp>
	areaDraw:center::x : int #<interface.hpp>
	areaDraw:center::y : int #<interface.hpp>
	areaDraw:coord::x1 : int #<interface.hpp>
	areaDraw:coord::y1 : int #<interface.hpp>
	areaDraw:coord::x2 : int #<interface.hpp>
	areaDraw:coord::y2 : int #<interface.hpp>
	button:%image : IMAGE* #<button.hpp>
	button:%x1 : int #<button.hpp>
	button:%y1 : int #<button.hpp>
	button:%x2 : int #<button.hpp>
	button:%y2 : int #<button.hpp>
	button::draw() -> void #<button.hpp>
	button::press() -> virtual void #<button.hpp>
	button::in(int x, int y) -> bool #<button.hpp>
	button::draw() -> virtual void #<button.hpp>
	button::getTop() -> int #<button.hpp>
	button::getLeft() -> int #<button.hpp>
	button::getHeight() -> int #<button.hpp>
	button::getWidth() -> int #<button.hpp>
	buttonFile:%action : ptrFunction #<button.hpp>
	buttonFile:%x1 : int #<button.hpp>
	buttonFile:%y1 : int #<button.hpp>
	buttonFile:%x2 : int #<button.hpp>
	buttonFile:%y2 : int #<button.hpp>
	buttonFile::press() -> void #<button.hpp>
	buttonFile::draw() -> void #<button.hpp>
	buttonFile::press() -> virtual void #<button.hpp>
	buttonFile::in(int x, int y) -> bool #<button.hpp>
	buttonFile::draw() -> virtual void #<button.hpp>
	buttonFile::getTop() -> int #<button.hpp>
	buttonFile::getLeft() -> int #<button.hpp>
	buttonFile::getHeight() -> int #<button.hpp>
	buttonFile::getWidth() -> int #<button.hpp>
	buttonFurniture:%type : int #<button.hpp>
	buttonFurniture:%tool : ptrFunction #<button.hpp>
	buttonFurniture:%x1 : int #<button.hpp>
	buttonFurniture:%y1 : int #<button.hpp>
	buttonFurniture:%x2 : int #<button.hpp>
	buttonFurniture:%y2 : int #<button.hpp>
	buttonFurniture::press() -> void #<button.hpp>
	buttonFurniture::draw() -> void #<button.hpp>
	buttonFurniture::press() -> virtual void #<button.hpp>
	buttonFurniture::in(int x, int y) -> bool #<button.hpp>
	buttonFurniture::draw() -> virtual void #<button.hpp>
	buttonFurniture::getTop() -> int #<button.hpp>
	buttonFurniture::getLeft() -> int #<button.hpp>
	buttonFurniture::getHeight() -> int #<button.hpp>
	buttonFurniture::getWidth() -> int #<button.hpp>
	buttonTools:%tool : ptrFunction #<button.hpp>
	buttonTools:%x1 : int #<button.hpp>
	buttonTools:%y1 : int #<button.hpp>
	buttonTools:%x2 : int #<button.hpp>
	buttonTools:%y2 : int #<button.hpp>
	buttonTools::press() -> void #<button.hpp>
	buttonTools::draw() -> void #<button.hpp>
	buttonTools::press() -> virtual void #<button.hpp>
	buttonTools::in(int x, int y) -> bool #<button.hpp>
	buttonTools::draw() -> virtual void #<button.hpp>
	buttonTools::getTop() -> int #<button.hpp>
	buttonTools::getLeft() -> int #<button.hpp>
	buttonTools::getHeight() -> int #<button.hpp>
	buttonTools::getWidth() -> int #<button.hpp>
	figure:%type : int #<interface.hpp>
	figure:%x1 : int #<interface.hpp>
	figure:%y1 : int #<interface.hpp>
	figure:%x2 : int #<interface.hpp>
	figure:%y2 : int #<interface.hpp>
	figure::checkPressed(int x, int y) -> virtual bool #<interface.hpp>
	figure::draw() -> virtual void #<interface.hpp>
	figure::press() -> virtual void #<interface.hpp>
	figure::save(FILE* f) -> virtual void #<interface.hpp>
	figure::getX1() -> virtual int #<interface.hpp>
	figure::getY1() -> virtual int #<interface.hpp>
	figure::getX2() -> virtual int #<interface.hpp>
	figure::getY2() -> virtual int #<interface.hpp>
	figure::in(int x, int y) -> bool #<interface.hpp>
	figure::getTop() -> int #<interface.hpp>
	figure::getLeft() -> int #<interface.hpp>
	figure::getHeight() -> int #<interface.hpp>
	figure::getWidth() -> int #<interface.hpp>
	objectClickable:%x1 : int #<interface.hpp>
	objectClickable:%y1 : int #<interface.hpp>
	objectClickable:%x2 : int #<interface.hpp>
	objectClickable:%y2 : int #<interface.hpp>
	objectClickable::press() -> virtual void #<interface.hpp>
	objectClickable::in(int x, int y) -> bool #<interface.hpp>
	objectClickable::draw() -> virtual void #<interface.hpp>
	objectClickable::getTop() -> int #<interface.hpp>
	objectClickable::getLeft() -> int #<interface.hpp>
	objectClickable::getHeight() -> int #<interface.hpp>
	objectClickable::getWidth() -> int #<interface.hpp>
	objectDisplay:%x1 : int #<interface.hpp>
	objectDisplay:%y1 : int #<interface.hpp>
	objectDisplay:%x2 : int #<interface.hpp>
	objectDisplay:%y2 : int #<interface.hpp>
	objectDisplay::in(int x, int y) -> bool #<interface.hpp>
	objectDisplay::draw() -> virtual void #<interface.hpp>
	objectDisplay::getTop() -> int #<interface.hpp>
	objectDisplay::getLeft() -> int #<interface.hpp>
	objectDisplay::getHeight() -> int #<interface.hpp>
	objectDisplay::getWidth() -> int #<interface.hpp>
	objectFigureOnWall:%type : int #<interface.hpp>
	objectFigureOnWall:%x1 : int #<interface.hpp>
	objectFigureOnWall:%y1 : int #<interface.hpp>
	objectFigureOnWall:%x2 : int #<interface.hpp>
	objectFigureOnWall:%y2 : int #<interface.hpp>
	objectFigureOnWall::objectOnWall : IMAGE* #<interface.hpp>
	objectFigureOnWall::checkPressed(int x, int y) -> bool #<interface.hpp>
	objectFigureOnWall::draw() -> void #<interface.hpp>
	objectFigureOnWall::press() -> void #<interface.hpp>
	objectFigureOnWall::save(FILE* f) -> void #<interface.hpp>
	objectFigureOnWall::getX1() -> int #<interface.hpp>
	objectFigureOnWall::getY1() -> int #<interface.hpp>
	objectFigureOnWall::getX2() -> int #<interface.hpp>
	objectFigureOnWall::getY2() -> int #<interface.hpp>
	objectFigureOnWall::checkPressed(int x, int y) -> virtual bool #<interface.hpp>
	objectFigureOnWall::draw() -> virtual void #<interface.hpp>
	objectFigureOnWall::press() -> virtual void #<interface.hpp>
	objectFigureOnWall::save(FILE* f) -> virtual void #<interface.hpp>
	objectFigureOnWall::getX1() -> virtual int #<interface.hpp>
	objectFigureOnWall::getY1() -> virtual int #<interface.hpp>
	objectFigureOnWall::getX2() -> virtual int #<interface.hpp>
	objectFigureOnWall::getY2() -> virtual int #<interface.hpp>
	objectFigureOnWall::in(int x, int y) -> bool #<interface.hpp>
	objectFigureOnWall::getTop() -> int #<interface.hpp>
	objectFigureOnWall::getLeft() -> int #<interface.hpp>
	objectFigureOnWall::getHeight() -> int #<interface.hpp>
	objectFigureOnWall::getWidth() -> int #<interface.hpp>
	objectFurniture:%t : int #<interface.hpp>
	objectFurniture:%type : int #<interface.hpp>
	objectFurniture:%x1 : int #<interface.hpp>
	objectFurniture:%y1 : int #<interface.hpp>
	objectFurniture:%x2 : int #<interface.hpp>
	objectFurniture:%y2 : int #<interface.hpp>
	objectFurniture::checkPressed(int x, int y) -> bool #<interface.hpp>
	objectFurniture::draw() -> void #<interface.hpp>
	objectFurniture::press() -> void #<interface.hpp>
	objectFurniture::save(FILE* f) -> void #<interface.hpp>
	objectFurniture::getX1() -> int #<interface.hpp>
	objectFurniture::getY1() -> int #<interface.hpp>
	objectFurniture::getX2() -> int #<interface.hpp>
	objectFurniture::getY2() -> int #<interface.hpp>
	objectFurniture::getT() -> int #<interface.hpp>
	objectFurniture::setT(int t) -> void #<interface.hpp>
	objectFurniture::checkPressed(int x, int y) -> virtual bool #<interface.hpp>
	objectFurniture::draw() -> virtual void #<interface.hpp>
	objectFurniture::press() -> virtual void #<interface.hpp>
	objectFurniture::save(FILE* f) -> virtual void #<interface.hpp>
	objectFurniture::getX1() -> virtual int #<interface.hpp>
	objectFurniture::getY1() -> virtual int #<interface.hpp>
	objectFurniture::getX2() -> virtual int #<interface.hpp>
	objectFurniture::getY2() -> virtual int #<interface.hpp>
	objectFurniture::in(int x, int y) -> bool #<interface.hpp>
	objectFurniture::getTop() -> int #<interface.hpp>
	objectFurniture::getLeft() -> int #<interface.hpp>
	objectFurniture::getHeight() -> int #<interface.hpp>
	objectFurniture::getWidth() -> int #<interface.hpp>
	objectFurniture$:example() -> objectFurniture& #<interface.hpp>
	objectWall:%w : int #<interface.hpp>
	objectWall:%weightRoom : int #<interface.hpp>
	objectWall:%heightRoom : int #<interface.hpp>
	objectWall:%paramRoom() -> void #<interface.hpp>
	objectWall:%type : int #<interface.hpp>
	objectWall:%x1 : int #<interface.hpp>
	objectWall:%y1 : int #<interface.hpp>
	objectWall:%x2 : int #<interface.hpp>
	objectWall:%y2 : int #<interface.hpp>
	objectWall::checkPressed(int x, int y) -> bool #<interface.hpp>
	objectWall::draw() -> void #<interface.hpp>
	objectWall::press() -> void #<interface.hpp>
	objectWall::save(FILE* f) -> void #<interface.hpp>
	objectWall::getX1() -> int #<interface.hpp>
	objectWall::getY1() -> int #<interface.hpp>
	objectWall::getX2() -> int #<interface.hpp>
	objectWall::getY2() -> int #<interface.hpp>
	objectWall::getW() -> int #<interface.hpp>
	objectWall::setW(int w) -> void #<interface.hpp>
	objectWall::checkPressed(int x, int y) -> virtual bool #<interface.hpp>
	objectWall::draw() -> virtual void #<interface.hpp>
	objectWall::press() -> virtual void #<interface.hpp>
	objectWall::save(FILE* f) -> virtual void #<interface.hpp>
	objectWall::getX1() -> virtual int #<interface.hpp>
	objectWall::getY1() -> virtual int #<interface.hpp>
	objectWall::getX2() -> virtual int #<interface.hpp>
	objectWall::getY2() -> virtual int #<interface.hpp>
	objectWall::in(int x, int y) -> bool #<interface.hpp>
	objectWall::getTop() -> int #<interface.hpp>
	objectWall::getLeft() -> int #<interface.hpp>
	objectWall::getHeight() -> int #<interface.hpp>
	objectWall::getWidth() -> int #<interface.hpp>
